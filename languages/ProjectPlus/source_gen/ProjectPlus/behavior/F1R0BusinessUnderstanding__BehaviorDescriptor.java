package ProjectPlus.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import ProjectPlus.editor.XMLAdmin;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class F1R0BusinessUnderstanding__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1ac1503e1be1628bL, "ProjectPlus.structure.F1R0BusinessUnderstanding");

  public static final SMethod<String> toXML_id5EOLTwqE9Qi = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("toXML").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("5EOLTwqE9Qi").build();
  public static final SMethod<String> phase1_id5EOLTwqF1lo = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("phase1").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("5EOLTwqF1lo").build();
  public static final SMethod<String> section1_id5EOLTwqE9QP = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("section1").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("5EOLTwqE9QP").build();
  public static final SMethod<String> section2_id5EOLTwqE9TQ = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("section2").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("5EOLTwqE9TQ").build();
  public static final SMethod<String> section3_id5EOLTwqE9Vs = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("section3").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("5EOLTwqE9Vs").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(toXML_id5EOLTwqE9Qi, phase1_id5EOLTwqF1lo, section1_id5EOLTwqE9QP, section2_id5EOLTwqE9TQ, section3_id5EOLTwqE9Vs);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String toXML_id5EOLTwqE9Qi(@NotNull SNode __thisNode__) {
    XMLAdmin xmlAdmin = new XMLAdmin();
    String top = xmlAdmin.head() + F1R0BusinessUnderstanding__BehaviorDescriptor.phase1_id5EOLTwqF1lo.invoke(__thisNode__);
    return top;
  }
  /*package*/ static String phase1_id5EOLTwqF1lo(@NotNull SNode __thisNode__) {
    String top = "<phase> \n <element>1</element> \n <name>Business Understanding</name> \n";
    return top;
  }
  /*package*/ static String section1_id5EOLTwqE9QP(@NotNull SNode __thisNode__) {
    String top = "<section> \n <element>1</element> \n <name>Determine Business Objectives</name> \n <background> \n <problem> \n";

    for (int i = 0; i < SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.determineBusinessObjectives$Pr$p), LINKS.background$FtHc), LINKS.problem$_A2i).size(); i++) {
      top = top + "<id>" + SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.determineBusinessObjectives$Pr$p), LINKS.background$FtHc), LINKS.problem$_A2i)).getElement(i), PROPS.id$ABZa) + "</id> \n <problemToSolved>" + SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.determineBusinessObjectives$Pr$p), LINKS.background$FtHc), LINKS.problem$_A2i)).getElement(i), PROPS.whatIsTheProblemToBeSolved$ACeb) + "</problemToSolved> \n <whyUseDataMining>" + SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.determineBusinessObjectives$Pr$p), LINKS.background$FtHc), LINKS.problem$_A2i)).getElement(i), PROPS.whyTheNeedToUseDataMining$ACtc) + "</whyUseDataMining> \n";
    }

    return top;
  }
  /*package*/ static String section2_id5EOLTwqE9TQ(@NotNull SNode __thisNode__) {
    String top = "<div class='table-resources'>" + "\n" + "<h1>RESO<span>URCES</span></h1>" + "\n" + "<table>" + "<tr>" + "\n" + "<th>Id</th>" + "\n" + "<th>Name</th>" + "\n" + "</tr>" + "\n";

    return top + "</table>" + "\n" + "</div>" + "\n";
  }
  /*package*/ static String section3_id5EOLTwqE9Vs(@NotNull SNode __thisNode__) {
    String top = "<div class='table-objectives'>" + "\n" + "<h1>OBJEC<span>TIVES</span></h1>" + "\n" + "<table>" + "<tr>" + "\n" + "<th>Id</th>" + "\n" + "<th>Description</th>" + "<th>Benefits</th>" + "\n" + "<th>Performance Criteria</th>" + "\n" + "</tr>" + "\n";

    return top + "</table>" + "\n" + "</div>" + "\n";
  }

  /*package*/ F1R0BusinessUnderstanding__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) toXML_id5EOLTwqE9Qi(node));
      case 1:
        return (T) ((String) phase1_id5EOLTwqF1lo(node));
      case 2:
        return (T) ((String) section1_id5EOLTwqE9QP(node));
      case 3:
        return (T) ((String) section2_id5EOLTwqE9TQ(node));
      case 4:
        return (T) ((String) section3_id5EOLTwqE9Vs(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink determineBusinessObjectives$Pr$p = MetaAdapterFactory.getContainmentLink(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1ac1503e1be1628bL, 0x1ac1503e1be93d82L, "determineBusinessObjectives");
    /*package*/ static final SContainmentLink background$FtHc = MetaAdapterFactory.getContainmentLink(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x40dad104ace38bf5L, 0x466c8f19adbe3189L, "background");
    /*package*/ static final SContainmentLink problem$_A2i = MetaAdapterFactory.getContainmentLink(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x466c8f19adbe3188L, 0x466c8f19adc8085cL, "problem");
  }

  private static final class PROPS {
    /*package*/ static final SProperty whatIsTheProblemToBeSolved$ACeb = MetaAdapterFactory.getProperty(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x147959cce44699a8L, 0x466c8f19adc80854L, "whatIsTheProblemToBeSolved");
    /*package*/ static final SProperty id$ABZa = MetaAdapterFactory.getProperty(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x147959cce44699a8L, 0x466c8f19adc80853L, "id");
    /*package*/ static final SProperty whyTheNeedToUseDataMining$ACtc = MetaAdapterFactory.getProperty(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x147959cce44699a8L, 0x466c8f19adc80855L, "whyTheNeedToUseDataMining");
  }
}
