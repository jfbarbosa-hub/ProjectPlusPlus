package ProjectPlus.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import ProjectPlus.editor.HTMLAdmin;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class M0Metadata__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x280d697b090a49dcL, "ProjectPlus.structure.M0Metadata");

  public static final SMethod<String> toHTML_id1hTmsN$3gIr = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("toHTML").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("1hTmsN$3gIr").build();
  public static final SMethod<String> tablePeople_id1hTmsN$bqLp = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("tablePeople").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("1hTmsN$bqLp").build();
  public static final SMethod<String> tableResources_id1hTmsN$cFlV = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("tableResources").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("1hTmsN$cFlV").build();
  public static final SMethod<String> tableObjectives_id1hTmsN$dj0Y = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("tableObjectives").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("1hTmsN$dj0Y").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(toHTML_id1hTmsN$3gIr, tablePeople_id1hTmsN$bqLp, tableResources_id1hTmsN$cFlV, tableObjectives_id1hTmsN$dj0Y);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String toHTML_id1hTmsN$3gIr(@NotNull SNode __thisNode__) {
    HTMLAdmin htmlAdmin = new HTMLAdmin();
    String top = htmlAdmin.head() + htmlAdmin.style() + htmlAdmin.navbar() + M0Metadata__BehaviorDescriptor.tablePeople_id1hTmsN$bqLp.invoke(__thisNode__) + M0Metadata__BehaviorDescriptor.tableResources_id1hTmsN$cFlV.invoke(__thisNode__) + M0Metadata__BehaviorDescriptor.tableObjectives_id1hTmsN$dj0Y.invoke(__thisNode__) + htmlAdmin.end();
    return top;
  }
  /*package*/ static String tablePeople_id1hTmsN$bqLp(@NotNull SNode __thisNode__) {
    String top = "<div class='table-people'>" + "\n" + "<h1>PEO<span>PLE</span></h1>" + "\n" + "<table>" + "<tr>" + "\n" + "<th>Id</th>" + "\n" + "<th>Name</th>" + "\n" + "<th>Workstation</th>" + "\n" + "<th>Department</th>" + "\n" + "<th>Rol</th>" + "\n" + "<th>Phone Number</th>" + "\n" + "<th>Important</th>" + "\n" + "</tr>" + "\n";

    for (int i = 0; i < SLinkOperations.getChildren(__thisNode__, LINKS.people$1cnj).size(); i++) {
      top = top + "<tr>" + "<td>" + M1Person__BehaviorDescriptor.getId_id1hTmsN$3Awu.invoke(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.people$1cnj)).getElement(i)) + "</td>" + "\n" + "<td>" + M1Person__BehaviorDescriptor.getName_id1hTmsN$3Ax9.invoke(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.people$1cnj)).getElement(i)) + "</td>" + "\n" + "<td>" + M1Person__BehaviorDescriptor.getWorkstation_id1hTmsN$3PJI.invoke(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.people$1cnj)).getElement(i)) + "</td>" + "\n" + "<td>" + M1Person__BehaviorDescriptor.getDepartment_id1hTmsN$3Q9A.invoke(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.people$1cnj)).getElement(i)) + "</td>" + "\n" + "<td>" + M1Person__BehaviorDescriptor.getRol_id1hTmsN$3UUn.invoke(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.people$1cnj)).getElement(i)) + "</td>" + "\n" + "<td>" + M1Person__BehaviorDescriptor.getDepartment_id1hTmsN$3Q9A.invoke(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.people$1cnj)).getElement(i)) + "</td>" + "\n" + "<td>" + M1Person__BehaviorDescriptor.getImportant_id1hTmsN$3WWs.invoke(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.people$1cnj)).getElement(i)) + "</td>" + "\n" + "</tr>" + "\n";
    }

    return top + "</table>" + "\n" + "</div>" + "\n";
  }
  /*package*/ static String tableResources_id1hTmsN$cFlV(@NotNull SNode __thisNode__) {
    String top = "<div class='table-resources'>" + "\n" + "<h1>RESO<span>URCES</span></h1>" + "\n" + "<table>" + "<tr>" + "\n" + "<th>Id</th>" + "\n" + "<th>Name</th>" + "\n" + "</tr>" + "\n";

    for (int i = 0; i < SLinkOperations.getChildren(__thisNode__, LINKS.resources$1cPl).size(); i++) {
      top = top + "<tr>" + "<td>" + M2Resource__BehaviorDescriptor.getId_id1hTmsN$deAf.invoke(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.resources$1cPl)).getElement(i)) + "</td>" + "\n" + "<td>" + M2Resource__BehaviorDescriptor.getName_id1hTmsN$deV8.invoke(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.resources$1cPl)).getElement(i)) + "</td>" + "\n" + "</td>" + "\n" + "</tr>" + "\n";
    }

    return top + "</table>" + "\n" + "</div>" + "\n";
  }
  /*package*/ static String tableObjectives_id1hTmsN$dj0Y(@NotNull SNode __thisNode__) {
    String top = "<div class='table-objectives'>" + "\n" + "<h1>OBJEC<span>TIVES</span></h1>" + "\n" + "<table>" + "<tr>" + "\n" + "<th>Id</th>" + "\n" + "<th>Description</th>" + "<th>Benefits</th>" + "\n" + "<th>Performance Criteria</th>" + "\n" + "</tr>" + "\n";

    for (int i = 0; i < SLinkOperations.getChildren(__thisNode__, LINKS.objectives$3nUz).size(); i++) {
      top = top + "<tr>" + "<td>" + M3Objective__BehaviorDescriptor.getId_id1hTmsN$doiS.invoke(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.objectives$3nUz)).getElement(i)) + "</td>" + "\n" + "<td>" + SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.objectives$3nUz)).getElement(i), PROPS.description$ndyU) + "</td>" + "\n" + "<td>" + SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.objectives$3nUz)).getElement(i), PROPS.benefits$nefX) + "</td>" + "\n" + "<td>" + M3Objective__BehaviorDescriptor.getPerformanceCriteria_id1hTmsN$dph$.invoke(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.objectives$3nUz)).getElement(i)) + "</td>" + "\n" + "</tr>" + "\n";
    }

    return top + "</table>" + "\n" + "</div>" + "\n";
  }

  /*package*/ M0Metadata__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) toHTML_id1hTmsN$3gIr(node));
      case 1:
        return (T) ((String) tablePeople_id1hTmsN$bqLp(node));
      case 2:
        return (T) ((String) tableResources_id1hTmsN$cFlV(node));
      case 3:
        return (T) ((String) tableObjectives_id1hTmsN$dj0Y(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink people$1cnj = MetaAdapterFactory.getContainmentLink(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x280d697b090a49dcL, 0x280d697b090c79d4L, "people");
    /*package*/ static final SContainmentLink resources$1cPl = MetaAdapterFactory.getContainmentLink(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x280d697b090a49dcL, 0x280d697b090c79d6L, "resources");
    /*package*/ static final SContainmentLink objectives$3nUz = MetaAdapterFactory.getContainmentLink(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x280d697b090a49dcL, 0x147959cce402556fL, "objectives");
  }

  private static final class PROPS {
    /*package*/ static final SProperty description$ndyU = MetaAdapterFactory.getProperty(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x147959cce4019c69L, 0x147959cce4025561L, "description");
    /*package*/ static final SProperty benefits$nefX = MetaAdapterFactory.getProperty(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x147959cce4019c69L, 0x147959cce4025564L, "benefits");
  }
}
