package ProjectPlus.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import java.io.File;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import javax.swing.JLabel;
import ProjectPlus.editor.GlobalSwingComponentsRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class Preprocessor__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x179c6a503cfe30baL, "ProjectPlus.structure.Preprocessor");

  public static final SMethod<Void> loadFileContent_id1usq_0WZMBu = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("loadFileContent").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("1usq_0WZMBu").build();
  public static final SMethod<String> htmlForLineNumber_id27E_FNcEnlV = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("htmlForLineNumber").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("27E_FNcEnlV").build(SMethodBuilder.createJavaParameter(Integer.TYPE, ""));
  public static final SMethod<String> toHtml_id27E_FNcEsyH = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("toHtml").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("27E_FNcEsyH").build(SMethodBuilder.createJavaParameter(String.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(loadFileContent_id1usq_0WZMBu, htmlForLineNumber_id27E_FNcEnlV, toHtml_id27E_FNcEsyH);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void loadFileContent_id1usq_0WZMBu(@NotNull SNode __thisNode__) {
    File f = FilePath__BehaviorDescriptor.getFile_id1usq_0WZOhG.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.filePath$42R3));
    if (f == null) {
      return;
    }
    String text = null;
    try {
      FileUtils fileUtils = new FileUtils();
      text = fileUtils.readfile2(f);
    } catch (Exception ex) {
      ex.printStackTrace();
      text = "<<< FILE NOT LOADED: " + ex.getMessage() + " >>>";
    }
    text = Preprocessor__BehaviorDescriptor.toHtml_id27E_FNcEsyH.invoke(__thisNode__, text);
    JLabel conteJLabel = (JLabel) GlobalSwingComponentsRegistry.getInstance().getRegisteredComponent(__thisNode__, "label");
    conteJLabel.setText(text);
  }
  /*package*/ static String htmlForLineNumber_id27E_FNcEnlV(@NotNull SNode __thisNode__, int lineNumber) {
    int numberOfChars = Integer.toString(lineNumber).length();
    String text = "<b><font color=#336600>" + lineNumber;
    for (int i = numberOfChars; i <= 6; i++) {
      text += "&nbsp;";
    }
    return text + "</font></b>&nbsp";
  }
  /*package*/ static String toHtml_id27E_FNcEsyH(@NotNull SNode __thisNode__, String text) {
    int lineNumber = 1;
    StringBuilder builder = new StringBuilder();
    builder.append("<html><pre>");
    builder.append(Preprocessor__BehaviorDescriptor.htmlForLineNumber_id27E_FNcEnlV.invoke(__thisNode__, ((int) lineNumber++)));
    boolean previousWasASpace = false;
    for (char c : text.toCharArray()) {
      if (c == ' ') {
        if (previousWasASpace) {
          builder.append("&nbsp;");
          previousWasASpace = false;
          continue;
        }
        previousWasASpace = true;
      } else {
        previousWasASpace = false;
      }
      switch (c) {
        case '<':
          builder.append("&lt;");
          break;
        case '>':
          builder.append("&gt;");
          break;
        case '&':
          builder.append("&amp;");
          break;
        case '\"':
          builder.append("&quot;");
          break;
        case '\n':
          builder.append("<br/>");
          builder.append(Preprocessor__BehaviorDescriptor.htmlForLineNumber_id27E_FNcEnlV.invoke(__thisNode__, ((int) lineNumber++)));
          break;
        case '\t':
          builder.append("&nbsp; &nbsp; &nbsp;");
          break;
        default:
          if (c < 128) {
            builder.append(c);
          } else {
            builder.append("&#").append((int) c).append(";");
          }
      }

    }
    builder.append("</pre><html>");
    return builder.toString();
  }

  /*package*/ Preprocessor__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        loadFileContent_id1usq_0WZMBu(node);
        return null;
      case 1:
        return (T) ((String) htmlForLineNumber_id27E_FNcEnlV(node, ((int) (Integer) parameters[0])));
      case 2:
        return (T) ((String) toHtml_id27E_FNcEsyH(node, (String) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink filePath$42R3 = MetaAdapterFactory.getContainmentLink(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x179c6a503cfe30baL, 0x21ea96bccc988c8aL, "filePath");
  }
}
