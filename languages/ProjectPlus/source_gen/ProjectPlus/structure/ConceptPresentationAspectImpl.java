package ProjectPlus.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Activity;
  private ConceptPresentation props_Activity2;
  private ConceptPresentation props_ActualSolution;
  private ConceptPresentation props_CommercialReason;
  private ConceptPresentation props_Expectation;
  private ConceptPresentation props_F1R0BusinessUnderstanding;
  private ConceptPresentation props_F1R1A0DetermineBusinessObjectives;
  private ConceptPresentation props_F1R1A1B0Background;
  private ConceptPresentation props_F1R1A1B1C0Problem;
  private ConceptPresentation props_F1R1A2B0BusinessObjectives;
  private ConceptPresentation props_F1R1A2B1BObjectives;
  private ConceptPresentation props_F1R1A3B0BusinessSuccessCriteria;
  private ConceptPresentation props_F1R1A3B1Criteria;
  private ConceptPresentation props_F1R2A0SituationAssessment;
  private ConceptPresentation props_F1R2A1B0ResourceInventory;
  private ConceptPresentation props_F1R2A1B1RInventory;
  private ConceptPresentation props_F1R2A2RequirementsAssumptionsAndConstraints;
  private ConceptPresentation props_F1R2A3B0RisksAndContingencies;
  private ConceptPresentation props_F1R2A3B1Risk;
  private ConceptPresentation props_F1R2A4Terminology;
  private ConceptPresentation props_F1R2A5B0CostsAndBenefits;
  private ConceptPresentation props_F1R2A5B1Cost;
  private ConceptPresentation props_F1R3A0DetermineDMObjectives;
  private ConceptPresentation props_F1R3A1DataMiningGoals;
  private ConceptPresentation props_F1R3A2DMSuccessCriteria;
  private ConceptPresentation props_F1R4A0CarryOutTheProjectPlan;
  private ConceptPresentation props_F1R4A1ProjectPlan;
  private ConceptPresentation props_F1R4A2InitialEvaluation;
  private ConceptPresentation props_F2R0DataUnderstanding;
  private ConceptPresentation props_F2R1A0CollectInitialData;
  private ConceptPresentation props_F2R1A1B0DataCollectionReport;
  private ConceptPresentation props_F2R1A1B1C0Reports;
  private ConceptPresentation props_F2R1A1B1C1CollectionTechniques;
  private ConceptPresentation props_F2R1A1B1C2Problem;
  private ConceptPresentation props_F2R1A1B1C3Solution;
  private ConceptPresentation props_F2R2A0DataDescription;
  private ConceptPresentation props_F2R2A1DataDescriptionReport;
  private ConceptPresentation props_F2R3A0DataExploration;
  private ConceptPresentation props_F2R3A1DataExplorationReport;
  private ConceptPresentation props_F2R4A0VerifyDataQuality;
  private ConceptPresentation props_F2R4A1DataQualityReport;
  private ConceptPresentation props_F3R0A0DataPreparation;
  private ConceptPresentation props_F3R0A1Dataset;
  private ConceptPresentation props_F3R0A2DatasetDescription;
  private ConceptPresentation props_F3R1A0SelectData;
  private ConceptPresentation props_F3R1A1InclusionExclusionData;
  private ConceptPresentation props_F3R2A0CleanData;
  private ConceptPresentation props_F3R2A1DataQualityReport;
  private ConceptPresentation props_F3R3A0StructureData;
  private ConceptPresentation props_F3R3A1AttributeDerivation;
  private ConceptPresentation props_F3R3A2LogGeneration;
  private ConceptPresentation props_F3R4A0IntegrateData;
  private ConceptPresentation props_F3R4A1DataUnification;
  private ConceptPresentation props_F3R5A0DataFormatting;
  private ConceptPresentation props_F3R5A1DataQualityReport;
  private ConceptPresentation props_F4R0Modeling;
  private ConceptPresentation props_F4R1A0selectModelingTechnique;
  private ConceptPresentation props_F4R1A1selectedTechnique;
  private ConceptPresentation props_F4R1A2modelAssumptions;
  private ConceptPresentation props_F4R2A0generateTestPlan;
  private ConceptPresentation props_F4R2A1testPlan;
  private ConceptPresentation props_F4R3A0buildingModel;
  private ConceptPresentation props_F4R3A1parametersSet;
  private ConceptPresentation props_F4R3A2Model;
  private ConceptPresentation props_F4R3A3ModelDescription;
  private ConceptPresentation props_F4R4A0evaluateModel;
  private ConceptPresentation props_F4R4A1resultEvaluateModel;
  private ConceptPresentation props_F4R4A2reviewParameters;
  private ConceptPresentation props_F5R0Evaluation;
  private ConceptPresentation props_F5R1A0evaluateResults;
  private ConceptPresentation props_F5R1A1assessmentResults;
  private ConceptPresentation props_F5R1A2approvedModels;
  private ConceptPresentation props_F5R2A1processReview;
  private ConceptPresentation props_F5R3A0determineNextSteps;
  private ConceptPresentation props_F5R3A1modeledTechnique;
  private ConceptPresentation props_F5R3A2listPossibleActions;
  private ConceptPresentation props_F6R0Deployment;
  private ConceptPresentation props_F6R1A1implementationPlan;
  private ConceptPresentation props_F6R2A1monitoringAndMaintenancePlan;
  private ConceptPresentation props_F6R3A0documentFinal;
  private ConceptPresentation props_F6R3A1finalReport;
  private ConceptPresentation props_F6R3A2approvedModelsFinal;
  private ConceptPresentation props_F6R4A1experienceDocumentation;
  private ConceptPresentation props_FilePath;
  private ConceptPresentation props_M0Metadata;
  private ConceptPresentation props_M1Person;
  private ConceptPresentation props_M2Resource;
  private ConceptPresentation props_M3Objective;
  private ConceptPresentation props_ObjectiveList;
  private ConceptPresentation props_PersonList;
  private ConceptPresentation props_Preprocessor;
  private ConceptPresentation props_Project;
  private ConceptPresentation props_ResourceList;
  private ConceptPresentation props_Responsable;
  private ConceptPresentation props_Role;
  private ConceptPresentation props_Task;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Activity:
        if (props_Activity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("activity");
          props_Activity = cpb.create();
        }
        return props_Activity;
      case LanguageConceptSwitch.Activity2:
        if (props_Activity2 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Activity2 = cpb.create();
        }
        return props_Activity2;
      case LanguageConceptSwitch.ActualSolution:
        if (props_ActualSolution == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("actualSolution");
          props_ActualSolution = cpb.create();
        }
        return props_ActualSolution;
      case LanguageConceptSwitch.CommercialReason:
        if (props_CommercialReason == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CommercialReason");
          props_CommercialReason = cpb.create();
        }
        return props_CommercialReason;
      case LanguageConceptSwitch.Expectation:
        if (props_Expectation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Expectation");
          props_Expectation = cpb.create();
        }
        return props_Expectation;
      case LanguageConceptSwitch.F1R0BusinessUnderstanding:
        if (props_F1R0BusinessUnderstanding == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Phase 1: Business Understanding");
          props_F1R0BusinessUnderstanding = cpb.create();
        }
        return props_F1R0BusinessUnderstanding;
      case LanguageConceptSwitch.F1R1A0DetermineBusinessObjectives:
        if (props_F1R1A0DetermineBusinessObjectives == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Determine Business Objectives");
          props_F1R1A0DetermineBusinessObjectives = cpb.create();
        }
        return props_F1R1A0DetermineBusinessObjectives;
      case LanguageConceptSwitch.F1R1A1B0Background:
        if (props_F1R1A1B0Background == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Background");
          props_F1R1A1B0Background = cpb.create();
        }
        return props_F1R1A1B0Background;
      case LanguageConceptSwitch.F1R1A1B1C0Problem:
        if (props_F1R1A1B1C0Problem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Problem");
          props_F1R1A1B1C0Problem = cpb.create();
        }
        return props_F1R1A1B1C0Problem;
      case LanguageConceptSwitch.F1R1A2B0BusinessObjectives:
        if (props_F1R1A2B0BusinessObjectives == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Business Objectives");
          props_F1R1A2B0BusinessObjectives = cpb.create();
        }
        return props_F1R1A2B0BusinessObjectives;
      case LanguageConceptSwitch.F1R1A2B1BObjectives:
        if (props_F1R1A2B1BObjectives == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("List Business Objectives");
          props_F1R1A2B1BObjectives = cpb.create();
        }
        return props_F1R1A2B1BObjectives;
      case LanguageConceptSwitch.F1R1A3B0BusinessSuccessCriteria:
        if (props_F1R1A3B0BusinessSuccessCriteria == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Business Success Criteria");
          props_F1R1A3B0BusinessSuccessCriteria = cpb.create();
        }
        return props_F1R1A3B0BusinessSuccessCriteria;
      case LanguageConceptSwitch.F1R1A3B1Criteria:
        if (props_F1R1A3B1Criteria == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Criteria");
          props_F1R1A3B1Criteria = cpb.create();
        }
        return props_F1R1A3B1Criteria;
      case LanguageConceptSwitch.F1R2A0SituationAssessment:
        if (props_F1R2A0SituationAssessment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Situation Assessment");
          props_F1R2A0SituationAssessment = cpb.create();
        }
        return props_F1R2A0SituationAssessment;
      case LanguageConceptSwitch.F1R2A1B0ResourceInventory:
        if (props_F1R2A1B0ResourceInventory == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Resource Inventory");
          props_F1R2A1B0ResourceInventory = cpb.create();
        }
        return props_F1R2A1B0ResourceInventory;
      case LanguageConceptSwitch.F1R2A1B1RInventory:
        if (props_F1R2A1B1RInventory == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("List Resource Inventory");
          props_F1R2A1B1RInventory = cpb.create();
        }
        return props_F1R2A1B1RInventory;
      case LanguageConceptSwitch.F1R2A2RequirementsAssumptionsAndConstraints:
        if (props_F1R2A2RequirementsAssumptionsAndConstraints == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Requirements, Assumptions, and Constraints");
          props_F1R2A2RequirementsAssumptionsAndConstraints = cpb.create();
        }
        return props_F1R2A2RequirementsAssumptionsAndConstraints;
      case LanguageConceptSwitch.F1R2A3B0RisksAndContingencies:
        if (props_F1R2A3B0RisksAndContingencies == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Risks And Contingencies");
          props_F1R2A3B0RisksAndContingencies = cpb.create();
        }
        return props_F1R2A3B0RisksAndContingencies;
      case LanguageConceptSwitch.F1R2A3B1Risk:
        if (props_F1R2A3B1Risk == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("risk");
          props_F1R2A3B1Risk = cpb.create();
        }
        return props_F1R2A3B1Risk;
      case LanguageConceptSwitch.F1R2A4Terminology:
        if (props_F1R2A4Terminology == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Terminology");
          props_F1R2A4Terminology = cpb.create();
        }
        return props_F1R2A4Terminology;
      case LanguageConceptSwitch.F1R2A5B0CostsAndBenefits:
        if (props_F1R2A5B0CostsAndBenefits == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Costs and Benefits");
          props_F1R2A5B0CostsAndBenefits = cpb.create();
        }
        return props_F1R2A5B0CostsAndBenefits;
      case LanguageConceptSwitch.F1R2A5B1Cost:
        if (props_F1R2A5B1Cost == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("cost");
          props_F1R2A5B1Cost = cpb.create();
        }
        return props_F1R2A5B1Cost;
      case LanguageConceptSwitch.F1R3A0DetermineDMObjectives:
        if (props_F1R3A0DetermineDMObjectives == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Determine DM Objectives");
          props_F1R3A0DetermineDMObjectives = cpb.create();
        }
        return props_F1R3A0DetermineDMObjectives;
      case LanguageConceptSwitch.F1R3A1DataMiningGoals:
        if (props_F1R3A1DataMiningGoals == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Data Mining Goals");
          props_F1R3A1DataMiningGoals = cpb.create();
        }
        return props_F1R3A1DataMiningGoals;
      case LanguageConceptSwitch.F1R3A2DMSuccessCriteria:
        if (props_F1R3A2DMSuccessCriteria == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DM Success Criteria");
          props_F1R3A2DMSuccessCriteria = cpb.create();
        }
        return props_F1R3A2DMSuccessCriteria;
      case LanguageConceptSwitch.F1R4A0CarryOutTheProjectPlan:
        if (props_F1R4A0CarryOutTheProjectPlan == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Carry out the project plan");
          props_F1R4A0CarryOutTheProjectPlan = cpb.create();
        }
        return props_F1R4A0CarryOutTheProjectPlan;
      case LanguageConceptSwitch.F1R4A1ProjectPlan:
        if (props_F1R4A1ProjectPlan == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ProjectPlan");
          props_F1R4A1ProjectPlan = cpb.create();
        }
        return props_F1R4A1ProjectPlan;
      case LanguageConceptSwitch.F1R4A2InitialEvaluation:
        if (props_F1R4A2InitialEvaluation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Initial Evaluation");
          props_F1R4A2InitialEvaluation = cpb.create();
        }
        return props_F1R4A2InitialEvaluation;
      case LanguageConceptSwitch.F2R0DataUnderstanding:
        if (props_F2R0DataUnderstanding == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Phase 2: Data Understanding");
          props_F2R0DataUnderstanding = cpb.create();
        }
        return props_F2R0DataUnderstanding;
      case LanguageConceptSwitch.F2R1A0CollectInitialData:
        if (props_F2R1A0CollectInitialData == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Collect Initial Data");
          props_F2R1A0CollectInitialData = cpb.create();
        }
        return props_F2R1A0CollectInitialData;
      case LanguageConceptSwitch.F2R1A1B0DataCollectionReport:
        if (props_F2R1A1B0DataCollectionReport == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Data Collection Report");
          props_F2R1A1B0DataCollectionReport = cpb.create();
        }
        return props_F2R1A1B0DataCollectionReport;
      case LanguageConceptSwitch.F2R1A1B1C0Reports:
        if (props_F2R1A1B1C0Reports == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Reports");
          props_F2R1A1B1C0Reports = cpb.create();
        }
        return props_F2R1A1B1C0Reports;
      case LanguageConceptSwitch.F2R1A1B1C1CollectionTechniques:
        if (props_F2R1A1B1C1CollectionTechniques == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Collection Techniques");
          props_F2R1A1B1C1CollectionTechniques = cpb.create();
        }
        return props_F2R1A1B1C1CollectionTechniques;
      case LanguageConceptSwitch.F2R1A1B1C2Problem:
        if (props_F2R1A1B1C2Problem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Problem");
          props_F2R1A1B1C2Problem = cpb.create();
        }
        return props_F2R1A1B1C2Problem;
      case LanguageConceptSwitch.F2R1A1B1C3Solution:
        if (props_F2R1A1B1C3Solution == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Solution");
          props_F2R1A1B1C3Solution = cpb.create();
        }
        return props_F2R1A1B1C3Solution;
      case LanguageConceptSwitch.F2R2A0DataDescription:
        if (props_F2R2A0DataDescription == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Description");
          props_F2R2A0DataDescription = cpb.create();
        }
        return props_F2R2A0DataDescription;
      case LanguageConceptSwitch.F2R2A1DataDescriptionReport:
        if (props_F2R2A1DataDescriptionReport == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Data Description Report ");
          props_F2R2A1DataDescriptionReport = cpb.create();
        }
        return props_F2R2A1DataDescriptionReport;
      case LanguageConceptSwitch.F2R3A0DataExploration:
        if (props_F2R3A0DataExploration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Data Exploration");
          props_F2R3A0DataExploration = cpb.create();
        }
        return props_F2R3A0DataExploration;
      case LanguageConceptSwitch.F2R3A1DataExplorationReport:
        if (props_F2R3A1DataExplorationReport == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Data Exploration Report");
          props_F2R3A1DataExplorationReport = cpb.create();
        }
        return props_F2R3A1DataExplorationReport;
      case LanguageConceptSwitch.F2R4A0VerifyDataQuality:
        if (props_F2R4A0VerifyDataQuality == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Verify Data Quality");
          props_F2R4A0VerifyDataQuality = cpb.create();
        }
        return props_F2R4A0VerifyDataQuality;
      case LanguageConceptSwitch.F2R4A1DataQualityReport:
        if (props_F2R4A1DataQualityReport == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Data Quality Report");
          props_F2R4A1DataQualityReport = cpb.create();
        }
        return props_F2R4A1DataQualityReport;
      case LanguageConceptSwitch.F3R0A0DataPreparation:
        if (props_F3R0A0DataPreparation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Phase 3: Data Preparation");
          props_F3R0A0DataPreparation = cpb.create();
        }
        return props_F3R0A0DataPreparation;
      case LanguageConceptSwitch.F3R0A1Dataset:
        if (props_F3R0A1Dataset == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Dataset");
          props_F3R0A1Dataset = cpb.create();
        }
        return props_F3R0A1Dataset;
      case LanguageConceptSwitch.F3R0A2DatasetDescription:
        if (props_F3R0A2DatasetDescription == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Dataset Description");
          props_F3R0A2DatasetDescription = cpb.create();
        }
        return props_F3R0A2DatasetDescription;
      case LanguageConceptSwitch.F3R1A0SelectData:
        if (props_F3R1A0SelectData == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Select Data");
          props_F3R1A0SelectData = cpb.create();
        }
        return props_F3R1A0SelectData;
      case LanguageConceptSwitch.F3R1A1InclusionExclusionData:
        if (props_F3R1A1InclusionExclusionData == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Inclusion or exclusion of data");
          props_F3R1A1InclusionExclusionData = cpb.create();
        }
        return props_F3R1A1InclusionExclusionData;
      case LanguageConceptSwitch.F3R2A0CleanData:
        if (props_F3R2A0CleanData == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Clean data");
          props_F3R2A0CleanData = cpb.create();
        }
        return props_F3R2A0CleanData;
      case LanguageConceptSwitch.F3R2A1DataQualityReport:
        if (props_F3R2A1DataQualityReport == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Data Quality Report");
          props_F3R2A1DataQualityReport = cpb.create();
        }
        return props_F3R2A1DataQualityReport;
      case LanguageConceptSwitch.F3R3A0StructureData:
        if (props_F3R3A0StructureData == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Structure the Data");
          props_F3R3A0StructureData = cpb.create();
        }
        return props_F3R3A0StructureData;
      case LanguageConceptSwitch.F3R3A1AttributeDerivation:
        if (props_F3R3A1AttributeDerivation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Attribute Derivation");
          props_F3R3A1AttributeDerivation = cpb.create();
        }
        return props_F3R3A1AttributeDerivation;
      case LanguageConceptSwitch.F3R3A2LogGeneration:
        if (props_F3R3A2LogGeneration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Log Generation");
          props_F3R3A2LogGeneration = cpb.create();
        }
        return props_F3R3A2LogGeneration;
      case LanguageConceptSwitch.F3R4A0IntegrateData:
        if (props_F3R4A0IntegrateData == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Integrate the Data");
          props_F3R4A0IntegrateData = cpb.create();
        }
        return props_F3R4A0IntegrateData;
      case LanguageConceptSwitch.F3R4A1DataUnification:
        if (props_F3R4A1DataUnification == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Data Unification");
          props_F3R4A1DataUnification = cpb.create();
        }
        return props_F3R4A1DataUnification;
      case LanguageConceptSwitch.F3R5A0DataFormatting:
        if (props_F3R5A0DataFormatting == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Data Formatting");
          props_F3R5A0DataFormatting = cpb.create();
        }
        return props_F3R5A0DataFormatting;
      case LanguageConceptSwitch.F3R5A1DataQualityReport:
        if (props_F3R5A1DataQualityReport == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Data Quality Report");
          props_F3R5A1DataQualityReport = cpb.create();
        }
        return props_F3R5A1DataQualityReport;
      case LanguageConceptSwitch.F4R0Modeling:
        if (props_F4R0Modeling == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Phase 4: Modeling");
          props_F4R0Modeling = cpb.create();
        }
        return props_F4R0Modeling;
      case LanguageConceptSwitch.F4R1A0selectModelingTechnique:
        if (props_F4R1A0selectModelingTechnique == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Select Modeling Technique");
          props_F4R1A0selectModelingTechnique = cpb.create();
        }
        return props_F4R1A0selectModelingTechnique;
      case LanguageConceptSwitch.F4R1A1selectedTechnique:
        if (props_F4R1A1selectedTechnique == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Selected Technique");
          props_F4R1A1selectedTechnique = cpb.create();
        }
        return props_F4R1A1selectedTechnique;
      case LanguageConceptSwitch.F4R1A2modelAssumptions:
        if (props_F4R1A2modelAssumptions == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Model Assumptions");
          props_F4R1A2modelAssumptions = cpb.create();
        }
        return props_F4R1A2modelAssumptions;
      case LanguageConceptSwitch.F4R2A0generateTestPlan:
        if (props_F4R2A0generateTestPlan == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Generate Test Plan");
          props_F4R2A0generateTestPlan = cpb.create();
        }
        return props_F4R2A0generateTestPlan;
      case LanguageConceptSwitch.F4R2A1testPlan:
        if (props_F4R2A1testPlan == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Test Plan");
          props_F4R2A1testPlan = cpb.create();
        }
        return props_F4R2A1testPlan;
      case LanguageConceptSwitch.F4R3A0buildingModel:
        if (props_F4R3A0buildingModel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Building Model");
          props_F4R3A0buildingModel = cpb.create();
        }
        return props_F4R3A0buildingModel;
      case LanguageConceptSwitch.F4R3A1parametersSet:
        if (props_F4R3A1parametersSet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Parameters Set");
          props_F4R3A1parametersSet = cpb.create();
        }
        return props_F4R3A1parametersSet;
      case LanguageConceptSwitch.F4R3A2Model:
        if (props_F4R3A2Model == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Model");
          props_F4R3A2Model = cpb.create();
        }
        return props_F4R3A2Model;
      case LanguageConceptSwitch.F4R3A3ModelDescription:
        if (props_F4R3A3ModelDescription == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Model Description");
          props_F4R3A3ModelDescription = cpb.create();
        }
        return props_F4R3A3ModelDescription;
      case LanguageConceptSwitch.F4R4A0evaluateModel:
        if (props_F4R4A0evaluateModel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Evaluate Model");
          props_F4R4A0evaluateModel = cpb.create();
        }
        return props_F4R4A0evaluateModel;
      case LanguageConceptSwitch.F4R4A1resultEvaluateModel:
        if (props_F4R4A1resultEvaluateModel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Result Evaluate Model");
          props_F4R4A1resultEvaluateModel = cpb.create();
        }
        return props_F4R4A1resultEvaluateModel;
      case LanguageConceptSwitch.F4R4A2reviewParameters:
        if (props_F4R4A2reviewParameters == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Review Parameters");
          props_F4R4A2reviewParameters = cpb.create();
        }
        return props_F4R4A2reviewParameters;
      case LanguageConceptSwitch.F5R0Evaluation:
        if (props_F5R0Evaluation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Phase 5: Evaluation");
          props_F5R0Evaluation = cpb.create();
        }
        return props_F5R0Evaluation;
      case LanguageConceptSwitch.F5R1A0evaluateResults:
        if (props_F5R1A0evaluateResults == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Evaluate Results");
          props_F5R1A0evaluateResults = cpb.create();
        }
        return props_F5R1A0evaluateResults;
      case LanguageConceptSwitch.F5R1A1assessmentResults:
        if (props_F5R1A1assessmentResults == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Assessment Results");
          props_F5R1A1assessmentResults = cpb.create();
        }
        return props_F5R1A1assessmentResults;
      case LanguageConceptSwitch.F5R1A2approvedModels:
        if (props_F5R1A2approvedModels == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Approved Models");
          props_F5R1A2approvedModels = cpb.create();
        }
        return props_F5R1A2approvedModels;
      case LanguageConceptSwitch.F5R2A1processReview:
        if (props_F5R2A1processReview == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Process Review");
          props_F5R2A1processReview = cpb.create();
        }
        return props_F5R2A1processReview;
      case LanguageConceptSwitch.F5R3A0determineNextSteps:
        if (props_F5R3A0determineNextSteps == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Determine Next Steps");
          props_F5R3A0determineNextSteps = cpb.create();
        }
        return props_F5R3A0determineNextSteps;
      case LanguageConceptSwitch.F5R3A1modeledTechnique:
        if (props_F5R3A1modeledTechnique == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Modeled Technique");
          props_F5R3A1modeledTechnique = cpb.create();
        }
        return props_F5R3A1modeledTechnique;
      case LanguageConceptSwitch.F5R3A2listPossibleActions:
        if (props_F5R3A2listPossibleActions == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("List Possible Actions");
          props_F5R3A2listPossibleActions = cpb.create();
        }
        return props_F5R3A2listPossibleActions;
      case LanguageConceptSwitch.F6R0Deployment:
        if (props_F6R0Deployment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Phase 6: Deployment");
          props_F6R0Deployment = cpb.create();
        }
        return props_F6R0Deployment;
      case LanguageConceptSwitch.F6R1A1implementationPlan:
        if (props_F6R1A1implementationPlan == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Implementation Plan");
          props_F6R1A1implementationPlan = cpb.create();
        }
        return props_F6R1A1implementationPlan;
      case LanguageConceptSwitch.F6R2A1monitoringAndMaintenancePlan:
        if (props_F6R2A1monitoringAndMaintenancePlan == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Monitoring And Maintenance Plan");
          props_F6R2A1monitoringAndMaintenancePlan = cpb.create();
        }
        return props_F6R2A1monitoringAndMaintenancePlan;
      case LanguageConceptSwitch.F6R3A0documentFinal:
        if (props_F6R3A0documentFinal == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Document Final");
          props_F6R3A0documentFinal = cpb.create();
        }
        return props_F6R3A0documentFinal;
      case LanguageConceptSwitch.F6R3A1finalReport:
        if (props_F6R3A1finalReport == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Final Report");
          props_F6R3A1finalReport = cpb.create();
        }
        return props_F6R3A1finalReport;
      case LanguageConceptSwitch.F6R3A2approvedModelsFinal:
        if (props_F6R3A2approvedModelsFinal == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ApprovedModelsFinal");
          props_F6R3A2approvedModelsFinal = cpb.create();
        }
        return props_F6R3A2approvedModelsFinal;
      case LanguageConceptSwitch.F6R4A1experienceDocumentation:
        if (props_F6R4A1experienceDocumentation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Experience Documentation");
          props_F6R4A1experienceDocumentation = cpb.create();
        }
        return props_F6R4A1experienceDocumentation;
      case LanguageConceptSwitch.FilePath:
        if (props_FilePath == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FilePath");
          props_FilePath = cpb.create();
        }
        return props_FilePath;
      case LanguageConceptSwitch.M0Metadata:
        if (props_M0Metadata == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_M0Metadata = cpb.create();
        }
        return props_M0Metadata;
      case LanguageConceptSwitch.M1Person:
        if (props_M1Person == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Person");
          props_M1Person = cpb.create();
        }
        return props_M1Person;
      case LanguageConceptSwitch.M2Resource:
        if (props_M2Resource == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("M2Resource");
          props_M2Resource = cpb.create();
        }
        return props_M2Resource;
      case LanguageConceptSwitch.M3Objective:
        if (props_M3Objective == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Objective");
          props_M3Objective = cpb.create();
        }
        return props_M3Objective;
      case LanguageConceptSwitch.ObjectiveList:
        if (props_ObjectiveList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ObjectiveList = cpb.create();
        }
        return props_ObjectiveList;
      case LanguageConceptSwitch.PersonList:
        if (props_PersonList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PersonList = cpb.create();
        }
        return props_PersonList;
      case LanguageConceptSwitch.Preprocessor:
        if (props_Preprocessor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Preprocessor");
          props_Preprocessor = cpb.create();
        }
        return props_Preprocessor;
      case LanguageConceptSwitch.Project:
        if (props_Project == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Project = cpb.create();
        }
        return props_Project;
      case LanguageConceptSwitch.ResourceList:
        if (props_ResourceList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ResourceList = cpb.create();
        }
        return props_ResourceList;
      case LanguageConceptSwitch.Responsable:
        if (props_Responsable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("responsable");
          props_Responsable = cpb.create();
        }
        return props_Responsable;
      case LanguageConceptSwitch.Role:
        if (props_Role == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Role");
          props_Role = cpb.create();
        }
        return props_Role;
      case LanguageConceptSwitch.Task:
        if (props_Task == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("task");
          props_Task = cpb.create();
        }
        return props_Task;
    }
    return null;
  }
}
