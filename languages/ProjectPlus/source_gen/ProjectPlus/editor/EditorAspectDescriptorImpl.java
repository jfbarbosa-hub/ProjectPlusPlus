package ProjectPlus.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Activity2_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new F1R0BusinessUnderstanding_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new F1R1A0DetermineBusinessObjectives_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new F1R1A1B0Background_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new F1R1A1B1C0Problem_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new F1R1A2B0BusinessObjectives_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new F1R1A2B1BObjectives_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new F1R1A3B0BusinessSuccessCriteria_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new F1R1A3B1Criteria_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new F1R2A0SituationAssessment_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new F1R2A1B0ResourceInventory_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new F1R2A1B1RInventory_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new F1R2A2RequirementsAssumptionsAndConstraints_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new F1R2A3B0RisksAndContingencies_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new F1R2A3B1Risk_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new F1R2A4Terminology_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new F1R2A5B0CostsAndBenefits_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new F1R2A5B1Cost_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new F1R3A0DetermineDMObjectives_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new F1R3A1DataMiningGoals_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new F1R3A2DMSuccessCriteria_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new F1R4A0CarryOutTheProjectPlan_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new F1R4A1ProjectPlan_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new F1R4A2InitialEvaluation_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new F2R0DataUnderstanding_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new F2R1A0CollectInitialData_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new F2R1A1B0DataCollectionReport_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new F2R1A1B1C0Reports_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new F2R1A1B1C1CollectionTechniques_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new F2R1A1B1C2Problem_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new F2R1A1B1C3Solution_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new F2R2A0DataDescription_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new F2R2A1DataDescriptionReport_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new F2R3A0DataExploration_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new F2R3A1DataExplorationReport_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new F2R4A0VerifyDataQuality_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new F2R4A1DataQualityReport_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new F3R0A0DataPreparation_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new F3R0A1Dataset_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new F3R0A2DatasetDescription_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new F3R1A0SelectData_Editor());
      case 41:
        return Collections.<ConceptEditor>singletonList(new F3R1A1InclusionExclusionData_Editor());
      case 42:
        return Collections.<ConceptEditor>singletonList(new F3R2A0CleanData_Editor());
      case 43:
        return Collections.<ConceptEditor>singletonList(new F3R2A1DataQualityReport_Editor());
      case 44:
        return Collections.<ConceptEditor>singletonList(new F3R3A0StructureData_Editor());
      case 45:
        return Collections.<ConceptEditor>singletonList(new F3R3A1AttributeDerivation_Editor());
      case 46:
        return Collections.<ConceptEditor>singletonList(new F3R3A2LogGeneration_Editor());
      case 47:
        return Collections.<ConceptEditor>singletonList(new F3R4A0IntegrateData_Editor());
      case 48:
        return Collections.<ConceptEditor>singletonList(new F3R4A1DataUnification_Editor());
      case 49:
        return Collections.<ConceptEditor>singletonList(new F3R5A0DataFormatting_Editor());
      case 50:
        return Collections.<ConceptEditor>singletonList(new F3R5A1DataQualityReport_Editor());
      case 51:
        return Collections.<ConceptEditor>singletonList(new F4R0Modeling_Editor());
      case 52:
        return Collections.<ConceptEditor>singletonList(new F4R1A0selectModelingTechnique_Editor());
      case 53:
        return Collections.<ConceptEditor>singletonList(new F4R1A1selectedTechnique_Editor());
      case 54:
        return Collections.<ConceptEditor>singletonList(new F4R1A2modelAssumptions_Editor());
      case 55:
        return Collections.<ConceptEditor>singletonList(new F4R2A0generateTestPlan_Editor());
      case 56:
        return Collections.<ConceptEditor>singletonList(new F4R2A1testPlan_Editor());
      case 57:
        return Collections.<ConceptEditor>singletonList(new F4R3A0buildingModel_Editor());
      case 58:
        return Collections.<ConceptEditor>singletonList(new F4R3A1parametersSet_Editor());
      case 59:
        return Collections.<ConceptEditor>singletonList(new F4R3A2Model_Editor());
      case 60:
        return Collections.<ConceptEditor>singletonList(new F4R3A3ModelDescription_Editor());
      case 61:
        return Collections.<ConceptEditor>singletonList(new F4R4A0evaluateModel_Editor());
      case 62:
        return Collections.<ConceptEditor>singletonList(new F4R4A1resultEvaluateModel_Editor());
      case 63:
        return Collections.<ConceptEditor>singletonList(new F4R4A2reviewParameters_Editor());
      case 64:
        return Collections.<ConceptEditor>singletonList(new F5R0Evaluation_Editor());
      case 65:
        return Collections.<ConceptEditor>singletonList(new F5R1A0evaluateResults_Editor());
      case 66:
        return Collections.<ConceptEditor>singletonList(new F5R1A1assessmentResults_Editor());
      case 67:
        return Collections.<ConceptEditor>singletonList(new F5R1A2approvedModels_Editor());
      case 68:
        return Collections.<ConceptEditor>singletonList(new F5R2A1processReview_Editor());
      case 69:
        return Collections.<ConceptEditor>singletonList(new F5R3A0determineNextSteps_Editor());
      case 70:
        return Collections.<ConceptEditor>singletonList(new F5R3A1modeledTechnique_Editor());
      case 71:
        return Collections.<ConceptEditor>singletonList(new F5R3A2listPossibleActions_Editor());
      case 72:
        return Collections.<ConceptEditor>singletonList(new F6R0Deployment_Editor());
      case 73:
        return Collections.<ConceptEditor>singletonList(new F6R1A1implementationPlan_Editor());
      case 74:
        return Collections.<ConceptEditor>singletonList(new F6R2A1monitoringAndMaintenancePlan_Editor());
      case 75:
        return Collections.<ConceptEditor>singletonList(new F6R3A0documentFinal_Editor());
      case 76:
        return Collections.<ConceptEditor>singletonList(new F6R3A1finalReport_Editor());
      case 77:
        return Collections.<ConceptEditor>singletonList(new F6R3A2approvedModelsFinal_Editor());
      case 78:
        return Collections.<ConceptEditor>singletonList(new F6R4A1experienceDocumentation_Editor());
      case 79:
        return Collections.<ConceptEditor>singletonList(new FilePath_Editor());
      case 80:
        return Collections.<ConceptEditor>singletonList(new M0Metadata_Editor());
      case 81:
        return Collections.<ConceptEditor>singletonList(new M1Person_Editor());
      case 82:
        return Collections.<ConceptEditor>singletonList(new M2Resource_Editor());
      case 83:
        return Collections.<ConceptEditor>singletonList(new M3Objective_Editor());
      case 84:
        return Collections.<ConceptEditor>singletonList(new ObjectiveList_Editor());
      case 85:
        return Collections.<ConceptEditor>singletonList(new PersonList_Editor());
      case 86:
        return Collections.<ConceptEditor>singletonList(new Preprocessor_Editor());
      case 87:
        return Collections.<ConceptEditor>singletonList(new Project_Editor());
      case 88:
        return Collections.<ConceptEditor>singletonList(new ResourceList_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1af72e38b3939ec2L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1ac1503e1be1628bL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x40dad104ace38bf5L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x466c8f19adbe3188L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x147959cce44699a8L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x466c8f19adbe318cL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x466c8f19adc71acaL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x40dad104ace6580bL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x147959cce44699aeL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1ac1503e1d4e7cb9L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1ac1503e1d4e7cfaL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1ac1503e1d66d79eL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1ac1503e1d4e7cfdL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1ac1503e1d4e7d01L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x147959cce44699c0L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1ac1503e1d4e7d06L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1ac1503e1d4e7d0cL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x147959cce44699caL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1ac1503e1d4e7cbaL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1ac1503e1d5ae73dL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1ac1503e1d5ae740L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1ac1503e1d4e7cbbL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1ac1503e1d5ae75eL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1ac1503e1d5ae761L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x40dad104acda28adL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x34315b05266b5288L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x34315b05266b5289L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x34315b0526746c8bL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x29ce644e15023e52L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x29ce644e15023e53L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x29ce644e15023e54L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x34315b05266b528aL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x34315b05266b528bL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x34315b05266b528cL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x34315b05266b528dL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x34315b05266b528eL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x34315b05266b528fL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x7d54ef0b645593f1L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x26631198a23c3f2fL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x26631198a23c3f30L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x26631198a23c3f35L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x26631198a23c3f36L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x26631198a23c3f39L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x26631198a23c3f3aL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x26631198a23c3f3bL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x26631198a23c3f40L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x26631198a23c3f41L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x26631198a23c3f4bL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x26631198a23c3f4cL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x26631198a23c3f4dL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x26631198a23c3f4eL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x7d54ef0b645593f2L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f44d4L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f44c9L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f44c0L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f44edL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f44ddL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f44fdL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f44f1L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f44ffL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f4506L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f452fL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f4535L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f4554L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x7d54ef0b645593f3L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f45b6L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f456cL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f4590L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f4578L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f45abL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f459dL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f45a7L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x7d54ef0b645593f4L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f45c2L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f45daL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f4613L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f45e4L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f45f6L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x5e6034c2f38f4605L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x179c6a503cfe30c2L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x280d697b090a49dcL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1af72e38b3939d14L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1af72e38b3939d0cL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x147959cce4019c69L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x40d6f378b3ad760bL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x40d6f378b3ad7605L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x179c6a503cfe30baL), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x1af72e38b3939f75L), MetaIdFactory.conceptId(0x8dfc7aaafac2458eL, 0x9c794064d1cad134L, 0x40d6f378b3ad7608L)).seal();
}
